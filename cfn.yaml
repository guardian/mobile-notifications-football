AWSTemplateFormatVersion: 2010-09-09
Description: mobile-notifications-football
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: mobile-notifications
  App:
    Description: Application name
    Type: String
    Default: football
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: mobile-dist
  DynamoNotificationTopic:
    Description: SNS topic to notify when there's a dynamo throttling event
    Type: String
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: s3Config
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub arn:aws:s3:::mobile-notifications-dist/${Stage}/*
        - PolicyName: dynamodb
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
              Resource: !Sub arn:aws:dynamodb:eu-west-1:201359054765:table/${Stack}-${App}-events-${Stage}
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Stack}-${App}-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Send Goal Alert notifications
      Handler: com.gu.mobile.notifications.football.Lambda::handler
      MemorySize: 512
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  MinuteEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Event sent to poll PA for match events
      ScheduleExpression: cron(* * * * ? *)
      Targets:
        - Id: Lambda
          Arn: !GetAtt Lambda.Arn

  MinuteEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MinuteEvent.Arn

  GoalEvent:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      FilterPattern: "successfully sent"
      MetricTransformations:
        - MetricNamespace: !Sub "${Stage}/football-notifications"
          MetricName: "goal-success"
          MetricValue: 1

  ErrorEvent:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      FilterPattern: "Error"
      MetricTransformations:
        - MetricNamespace: !Sub "${Stage}/football-notifications"
          MetricName: "error"
          MetricValue: 1

  dynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Stack}-${App}-events-${Stage}
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
      - AttributeName: eventId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 20
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  MobileNotificationsFootballConsumedReadThrottleEvents:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/DynamoDB
      MetricName: ReadThrottleEvents
      Unit: Count
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: TableName
        Value: !Ref dynamoTable
      Threshold: 10
      Period: 300
      EvaluationPeriods: 1
      AlarmActions: [ !Ref DynamoNotificationTopic ]

  MobileNotificationsFootballConsumedWriteThrottleEvents:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/DynamoDB
      MetricName: WriteThrottleEvents
      Unit: Count
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: TableName
        Value: !Ref dynamoTable
      Threshold: 10
      Period: 300
      EvaluationPeriods: 1
      AlarmActions: [ !Ref DynamoNotificationTopic ]

  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 100
      MinCapacity: 20
      ResourceId: !Sub table/${dynamoTable}
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: [ application-autoscaling.amazonaws.com ]
          Action: [ "sts:AssumeRole" ]
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:UpdateTable
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:GetMetricStatistics
              - cloudwatch:SetAlarmState
              - cloudwatch:DeleteAlarms
            Resource: "*"

  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 30
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization